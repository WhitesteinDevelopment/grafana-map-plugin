{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","console","debug","panel","mapCenter","setLocationByUserGeolocation","log","setNewCoords","mapCenterMoved","createMap","isADiferentCity","layersChanged","map","remove","resize","panToMapCenter","clearLayers","setMetrics","drawPoints","drawPointDetails","renderingCompleted","_","isEqual","layerNames","Object","keys","overlayMaps"],"mappings":";;;;;kBAIwBA,I;;AAJxB;;;;AACA;;;;AACA;;;;AAEe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,MAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,OAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,WAAMC,QAAN;AAAA,GAAzB;;AAEA,WAASA,MAAT,GAAkB;AAChB,QAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB;AACA,QAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,WAAKO,QAAL,GAAgB,IAAIC,kBAAJ,CAAaR,IAAb,EAAmBC,YAAnB,CAAhB;AACAQ,cAAQC,KAAR,CAAc,mBAAd;;AAEA,UAAG,uBAAqBV,KAAKW,KAAL,CAAWC,SAAnC,EAA8C;AAC5CZ,aAAKa,4BAAL;AACD,OAFD;AAGA;AACA,YAAI,wBAAsBb,KAAKW,KAAL,CAAWC,SAArC,EAAgD;AAAC;AAC/CH,kBAAQK,GAAR,CAAY,mBAAZ;AACAd,eAAKe,YAAL;AACD,SAHD,MAKEf,KAAKgB,cAAL,GAAoB,IAApB;;AAEFhB,WAAKO,QAAL,CAAcU,SAAd;AACD,KAhBD,MAiBA,IAAI,wBAAsBjB,KAAKW,KAAL,CAAWC,SAAjC,IAA8CZ,KAAKkB,eAAL,EAAlD,EAA0E;AACxET,cAAQK,GAAR,CAAY,uBAAZ;AACAd,WAAKe,YAAL;AACD;;AAED,QAAGI,eAAH,EAAmB;AACjBV,cAAQK,GAAR,CAAY,qBAAZ;AACAd,WAAKO,QAAL,CAAca,GAAd,CAAkBC,MAAlB;AACArB,WAAKO,QAAL,CAAcU,SAAd;AACD;;AAEDjB,SAAKO,QAAL,CAAce,MAAd;;AAEA,QAAGtB,KAAKgB,cAAR,EAAwB;AACtBhB,WAAKO,QAAL,CAAcgB,cAAd;AACD;;AAEDvB,SAAKO,QAAL,CAAciB,WAAd;AACAxB,SAAKO,QAAL,CAAckB,UAAd;;AAGA;AACAzB,SAAKO,QAAL,CAAcmB,UAAd;;AAEA;;;AAGA;AACA1B,SAAKO,QAAL,CAAcoB,gBAAd;;AAEA3B,SAAK4B,kBAAL;AACD;;AAED;AACA,WAAST,aAAT,GAAyB;AACvB,WAAO,CAACU,iBAAEC,OAAF,CAAU9B,KAAK+B,UAAf,EAA2BC,OAAOC,IAAP,CAAYjC,KAAKO,QAAL,CAAc2B,WAA1B,CAA3B,CAAR;AACD;AACF","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\r\nimport WorldMap from './worldmap';\r\nimport { hideAllGraphPopups, getUserLocation } from './utils/map_utils';\r\n\r\nexport default function link(scope, elem, attrs, ctrl) {\r\n  const mapContainer = elem.find('.map-container')[0];\r\n\r\n  ctrl.events.on('render', () => render());\r\n\r\n  function render() {\r\n    if (!ctrl.data) return;\r\n\r\n    //map is initializing\r\n    if (!ctrl.worldMap) {\r\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\r\n      console.debug('creating worldMap');\r\n\r\n      if('User Geolocation'===ctrl.panel.mapCenter) {\r\n        ctrl.setLocationByUserGeolocation();\r\n      } else\r\n      //detect city change when using Location Variable\r\n      if ('Location Variable'===ctrl.panel.mapCenter) {// && this.ctrl.isADiferentCity()\r\n        console.log('centering at city');\r\n        ctrl.setNewCoords();\r\n      }\r\n      else\r\n        ctrl.mapCenterMoved=true;\r\n\r\n      ctrl.worldMap.createMap();      \r\n    } else\r\n    if ('Location Variable'===ctrl.panel.mapCenter && ctrl.isADiferentCity()) {\r\n      console.log('centering at new city');\r\n      ctrl.setNewCoords();\r\n    }\r\n\r\n    if(layersChanged()){\r\n      console.log('layers had changed!');\r\n      ctrl.worldMap.map.remove();\r\n      ctrl.worldMap.createMap();\r\n    }\r\n    \r\n    ctrl.worldMap.resize();\r\n\r\n    if(ctrl.mapCenterMoved) {\r\n      ctrl.worldMap.panToMapCenter();\r\n    }\r\n\r\n    ctrl.worldMap.clearLayers();\r\n    ctrl.worldMap.setMetrics()\r\n\r\n\r\n    //ctrl.worldMap.filterEmptyData();\r\n    ctrl.worldMap.drawPoints();\r\n\r\n    /**\r\n    * popups and graph display\r\n    */\r\n    // draw all info associated with selected point but when redrawing the chart just update information related\r\n    ctrl.worldMap.drawPointDetails(); \r\n\r\n    ctrl.renderingCompleted();\r\n  }\r\n\r\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\r\n  function layersChanged() {\r\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\r\n  }\r\n}\r\n"]}